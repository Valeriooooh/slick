WS = _{ " " | "\t" | "\r" | "\n" }

LEFT_PAREN = _{"("}
RIGHT_PAREN = _{")"}

SEMICOLON = _{";"}
COMMA = _{","}

LEFT_BRACKET = _{"{"}
RIGHT_BRACKET = _{"}"}

IDENT = {!BOOL ~ (ASCII_ALPHA)~(ASCII_ALPHA|ASCII_DIGIT)* }


S_INT = {(("-"|"+") ~ ASCII_DIGIT+)}

U_INT = {(ASCII_DIGIT)+}

INT = {(
      S_INT
      |U_INT
      )}


FLOAT = {(
          ((ASCII_DIGIT)+ ~ "." ~ (ASCII_DIGIT)*)
          |("."~ASCII_DIGIT+)
        )}

BOOL = { "true" | "false"}

STRING = ${ "\"" ~ INNER ~ "\"" }

INNER = @{ CHAR_INNER* }

CHAR_INNER = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
CHAR = {"'" ~ CHAR_INNER ~ "'"}

ATOM = {(
      IDENT 
      | FLOAT 
      | INT 
      | CHAR 
      | STRING 
      | BOOL 
)}

EXPR = {
  (
  ATOM
  |(LEFT_PAREN ~ WS* ~ EXPR ~ WS* ~ RIGHT_PAREN)
  )
}

TYPE = {
  IDENT
    |"int"
    |"uint"
    |"float"
    |"bool"
}


TYPEOF = {(":" ~ WS* ~ TYPE)}

LET = {"let"}
LET_MUT = {"letm"}
LET_EXPR = { (LET_MUT | LET) ~ WS+ ~ IDENT ~ WS* ~ (TYPEOF)? ~ WS* ~ "=" ~ WS* ~ EXPR ~ WS*  ~ WS* ~ SEMICOLON}
RETURN = {"ret" ~ WS+ ~ EXPR ~ WS* ~ SEMICOLON}

STATEMENT = _{(LET_EXPR|IF|RETURN)}

FN_ARGS={
  (IDENT ~ WS* ~ TYPEOF ~ WS* ~ (COMMA ~ WS* ~ IDENT ~ WS* ~ TYPEOF)+)
    |(IDENT ~ WS* ~ TYPEOF)
}

FN_DEF = {"fun" ~ WS+ ~ IDENT ~ WS* ~ LEFT_PAREN ~ WS* ~ FN_ARGS? ~ WS* ~ RIGHT_PAREN ~ WS* ~ TYPEOF ~ WS* ~ BODY}

IF = {"if" ~ WS+ ~ EXPR ~ WS* ~ BODY}

BODY = {LEFT_BRACKET ~ WS* ~ (WS* ~ STATEMENT)* ~ WS*  ~ RIGHT_BRACKET}

TOKEN = _{( FN_DEF )}


FILE = _{ SOI ~ (TOKEN|WS)* ~ EOI }
